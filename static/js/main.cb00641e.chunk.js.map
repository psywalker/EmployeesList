{"version":3,"sources":["utils/actions.js","styles/PageContainer.js","components/InputTextField.js","styles/EmployeeContainerStyled.js","components/EmployeeContainer.js","components/IndeterminateCheckbox.js","components/Table.js","App.js","utils/getColumns.js","styles/overlayStyles.js","utils/createListEmployees.js","utils/initialStore.js","utils/reducer.js","index.js"],"names":["changeOverlayFlag","isOverlay","type","PageContainer","styled","div","InputTextField","handleOnChange","func","rest","TextField","onChange","value","target","EmployeeContainerStyled","EmployeeContainer","inputName","inputLastName","inputAge","setInputName","setInputLastName","setInputAge","handleCreateEmployee","required","id","label","variant","Button","color","onClick","disabled","IndeterminateCheckbox","forwardRef","ref","indeterminate","handeChangeSelectedRow","defaultRef","useRef","resolvedRef","useEffect","current","Table","columns","data","useTable","useResizeColumns","useBlockLayout","hooks","visibleColumns","push","width","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","useSortBy","useRowSelect","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","selectedNames","map","item","index","length","values","firstName","headerGroup","getHeaderGroupProps","headers","column","columnIndex","classForCellWithChexbox","lastTh","getHeaderProps","className","resizable","getResizerProps","isResizing","render","getSortByToggleProps","isSorted","isSortedDesc","classForSelectedRow","original","isSelected","getRowProps","cells","cell","cellIndex","getCellProps","colSpan","Typography","delay","ms","Promise","resolve","setTimeout","App","memo","dispatch","useDispatch","useSelector","state","employees","useState","setData","handleRemoveEmployee","handleRemoveAllEmployee","minWidth","accessor","tableProps","isAllRowsSelected","size","rowIndex","dataId","selectedRows","filter","getColumns","then","rowDeleteIndex","removeEmployee","active","spinner","text","styles","wrapper","position","height","padding","transition","fontFamily","fontSize","overlay","top","left","display","textAlign","background","zIndex","opacity","gutterBottom","lastName","age","firstNames","lastNames","initialStore","forEach","name","i","min","max","employee","nanoid","Math","floor","random","createListEmployees","action","updateEmployess","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cb00641e.chunk.js","sourcesContent":["export const ADD_EMPLOYEE = \"ADD_EMPLOYEE\";\nexport const REMOVE_EMPLOYEE = \"REMOVE_EMPLOYEE\";\nexport const REMOVE_ALL_EMPLOYEES = \"REMOVE_ALL_EMPLOYEES\";\nexport const CHANGE_OVERLAY_FLAG = \"CHANGE_OVERLAY_FLAG\";\n\nexport const addEmployee = (firstName, lastName, age) => ({\n  type: ADD_EMPLOYEE,\n  firstName,\n  lastName,\n  age\n});\n\nexport const removeEmployee = (dataId, rowDeleteIndex, selectedRows) => ({\n  type: REMOVE_EMPLOYEE,\n  dataId,\n  rowDeleteIndex,\n  selectedRows\n});\n\nexport const removeAllEmployee = () => ({\n  type: REMOVE_ALL_EMPLOYEES\n});\n\nexport const changeOverlayFlag = (isOverlay) => ({\n  type: CHANGE_OVERLAY_FLAG,\n  isOverlay,\n});","import styled from \"styled-components\";\n\nexport const PageContainer = styled.div`\n  padding: 1rem;\n\n  .container {\n  }\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n    font-family: \"Roboto\";\n    width: 500px;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    .row-selected {\n      background: rgba(24, 168, 204, 0.12);\n    }\n    .sorted-container {\n      display: flex !important;\n      align-items: center !important;\n      height: 30px;\n      text-align: left;\n    }\n    .cell-with-checkbox {\n      display: flex !important;\n      justify-content: center !important;\n\n      & .sorted-container {\n        display: inline-block !important;\n        text-align: center;\n      }\n    }\n    thead {\n      position: sticky;\n      top: 0;\n\n      tr {\n      }\n    }\n    tbody {\n      height: 300px;\n      overflow-y: auto;\n      display: grid;\n      tr {\n        transition: all 0.3s;\n      }\n      tr:hover {\n        background: rgba(24, 168, 204, 0.12);\n      }\n    }\n    tfoot td {\n      border-top: 1px solid #000;\n      box-shadow: 0px -9px 6px -1px rgba(34, 60, 80, 0.23);\n      justify-content: left;\n      align-items: start;\n      display: flex;\n      gap: 5px;\n    }\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      text-align: left;\n\n      :last-child {\n      }\n      .resizer {\n        overflow: hidden;\n        opacity: 0.4;\n        cursor: ew-resize;\n        width: 20px;\n        height: 32px;\n        position: absolute;\n        right: 0;\n        z-index: 1;\n        top: 16px;\n        transform: translate(0, -50%);\n        touch-action: none;\n        transition: all 0.1s;\n        content: \"\\EA9E\";\n        & svg {\n          font-size: 40px;\n        }\n        &.isResizing,\n        &:hover {\n          opacity: 1;\n        }\n      }\n    }\n    th {\n      display: flex;\n      box-shadow: 0px 10px 6px -1px rgba(34, 60, 80, 0.23);\n      font-size: 22px;\n      height: 48px;\n    }\n    td {\n      display: flex !important;\n      align-items: center;\n      font-size: 18px;\n      font-weight: bold;\n    }\n  }\n`;\n","import React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\nexport const InputTextField = ({ handleOnChange, func, ...rest }) => (\n  <TextField\n    {...rest}\n    onChange={({ target: { value } }) => handleOnChange(value, func)}\n  />\n);\n","import styled from \"styled-components\";\n\nexport const EmployeeContainerStyled = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  gap: 10px;\n`;\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { InputTextField } from \"./InputTextField\";\r\nimport { EmployeeContainerStyled } from \"../styles/EmployeeContainerStyled\"; \r\n\r\nexport const EmployeeContainer = ({\r\n  inputName,\r\n  inputLastName,\r\n  inputAge,\r\n  setInputName,\r\n  setInputLastName,\r\n  setInputAge,\r\n  handleOnChange,\r\n  handleCreateEmployee\r\n}) => {\r\n  return (\r\n  <EmployeeContainerStyled>\r\n  <InputTextField\r\n    required\r\n    id=\"name\"\r\n    label=\"Имя\"\r\n    variant=\"outlined\"\r\n    value={inputName}\r\n    func={setInputName}\r\n    handleOnChange={(value, func) => handleOnChange(value, func)}\r\n  />\r\n  <InputTextField\r\n    required\r\n    id=\"last-name\"\r\n    label=\"Фамилия\"\r\n    variant=\"outlined\"\r\n    value={inputLastName}\r\n    func={setInputLastName}\r\n    handleOnChange={(value, func) => handleOnChange(value, func)}\r\n  />\r\n  <InputTextField\r\n    required\r\n    type=\"number\"\r\n    id=\"age\"\r\n    label=\"Возраст\"\r\n    variant=\"outlined\"\r\n    value={inputAge}\r\n    func={setInputAge}\r\n    handleOnChange={(value, func) => handleOnChange(value, func)}\r\n  />\r\n  <Button\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    onClick={handleCreateEmployee}\r\n    disabled={!inputName || !inputLastName || !inputAge}\r\n  >\r\n    Создать\r\n  </Button>\r\n</EmployeeContainerStyled>)\r\n}","import React, { useEffect, forwardRef, useRef } from \"react\";\n\nexport const IndeterminateCheckbox = forwardRef(\n  ({ indeterminate, handeChangeSelectedRow, ...rest }, ref) => {\n    const defaultRef = useRef();\n    const resolvedRef = ref || defaultRef;\n\n    useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n      <>\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport {\n  useTable,\n  useRowSelect,\n  useResizeColumns,\n  useBlockLayout,\n  useSortBy\n} from \"react-table\";\nimport { Typography } from \"@material-ui/core\";\nimport ReorderTwoToneIcon from \"@material-ui/icons/ReorderTwoTone\";\nimport { IndeterminateCheckbox } from \"./IndeterminateCheckbox\";\n\nexport const Table = ({ columns, data }) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useResizeColumns,\n    useBlockLayout,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => [\n        {\n          id: \"selection\",\n          width: 50,\n\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <div>\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n            </div>\n          ),\n\n          Cell: ({ row }) => (\n            <div>\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          )\n        },\n        ...columns\n      ]);\n    },\n    useSortBy,\n    useRowSelect\n  );\n\n  const selectedNames = selectedFlatRows.map((item, index) =>\n    index === selectedFlatRows.length - 1\n      ? item?.values?.firstName\n      : item?.values?.firstName + \", \"\n  );\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column, columnIndex) => {\n                const classForCellWithChexbox = !columnIndex\n                  ? \"cell-with-checkbox\"\n                  : \"\";\n                const lastTh = columnIndex === headerGroup.headers.length - 1;\n\n                return (\n                  <th\n                    {...column.getHeaderProps()}\n                    className={classForCellWithChexbox}\n                  >\n                    {column.resizable && (\n                      <div\n                        {...column.getResizerProps()}\n                        className={`resizer ${\n                          column.isResizing ? \"isResizing\" : \"\"\n                        }`}\n                      >\n                        <ReorderTwoToneIcon />\n                      </div>\n                    )}\n\n                    {!lastTh ? (\n                      <span\n                        {...column.getHeaderProps(\n                          column.getSortByToggleProps()\n                        )}\n                        className=\"sorted-container\"\n                      >\n                        {column.isSorted\n                          ? column.isSortedDesc\n                            ? column.render(\"Header\") + \" 🔽\"\n                            : column.render(\"Header\") + \" 🔼\"\n                          : column.render(\"Header\")}\n                      </span>\n                    ) : (\n                      column.render(\"Header\")\n                    )}\n                  </th>\n                );\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row) => {\n            const { isSelected } = row?.original;\n            const classForSelectedRow =\n              isSelected || row.isSelected ? \"row-selected\" : \"\";\n\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()} className={classForSelectedRow}>\n                {row.cells.map((cell, cellIndex) => {\n                  const classForCellWithChexbox = !cellIndex\n                    ? \"cell-with-checkbox\"\n                    : \"\";\n                  return (\n                    <td\n                      className={classForCellWithChexbox}\n                      {...cell.getCellProps()}\n                    >\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td colSpan=\"4\">\n              <Typography color=\"secondary\">Пользователи:</Typography>\n              <Typography color=\"primary\">{selectedNames}</Typography>\n            </td>\n          </tr>\n        </tfoot>\n      </table>\n    </>\n  );\n};\n","import React, { useState, useEffect, memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { Typography } from \"@material-ui/core\";\nimport {\n  addEmployee,\n  removeEmployee,\n  removeAllEmployee,\n  changeOverlayFlag,\n} from \"./utils/actions\";\nimport { PageContainer } from \"./styles/PageContainer\";\nimport { EmployeeContainer } from \"./components/EmployeeContainer\"; \nimport { Table } from \"./components/Table\";\nimport { getColumns } from \"./utils/getColumns\";\nimport { overlayStyles } from \"./styles/overlayStyles\";\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst App = memo(() => {\n  const dispatch = useDispatch();\n  const { employees, isOverlay } = useSelector((state) => {\n    return { employees: state.employees, isOverlay: state.isOverlay };\n  });\n  const [inputName, setInputName] = useState(\"\");\n  const [inputLastName, setInputLastName] = useState(\"\");\n  const [inputAge, setInputAge] = useState(\"\");\n  const [data, setData] = useState(employees);\n\n  const handleCreateEmployee = () => {\n    dispatch(changeOverlayFlag(true));\n    delay(2000).then(() => {\n      dispatch(addEmployee(inputName, inputLastName, inputAge));\n      dispatch(changeOverlayFlag(false));\n    });\n    setInputName(\"\");\n    setInputLastName(\"\");\n    setInputAge(\"\");\n  };\n\n  const handleOnChange = (value, func) => {\n    func(value);\n  };\n\n  const handleRemoveEmployee = (dataId, rowIndex, selectedRows) => {\n    dispatch(changeOverlayFlag(true));\n    delay(2000).then(() => {\n      dispatch(changeOverlayFlag(false));\n      dispatch(removeEmployee(dataId, rowIndex, selectedRows));\n    });\n  }\n\n  const handleRemoveAllEmployee = () => {\n    dispatch(changeOverlayFlag(true));\n    delay(2000).then(() => {\n      dispatch(changeOverlayFlag(false));\n      dispatch(removeAllEmployee());\n    });\n  }\n  const columns = getColumns(handleRemoveEmployee, handleRemoveAllEmployee)\n\n  useEffect(() => {\n    setData(employees);\n  }, [employees]);\n\n  return (\n    <PageContainer>\n      <LoadingOverlay\n        active={isOverlay}\n        spinner\n        text=\"Ожидайте результата действия...\"\n        styles={overlayStyles()}\n      >\n        <Typography variant=\"h5\" gutterBottom>\n          Создать сотрудника:\n        </Typography>\n        <EmployeeContainer \n          inputName={inputName} \n          inputLastName={inputLastName}\n          inputAge={inputAge}\n          setInputName={setInputName}\n          setInputLastName={setInputLastName}\n          setInputAge={setInputAge}\n          handleOnChange={handleOnChange}\n          handleCreateEmployee={handleCreateEmployee}\n        />\n        <Table columns={columns} data={data} />\n      </LoadingOverlay>\n    </PageContainer>\n  );\n});\n\nexport default App;\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport const getColumns = (handleRemoveEmployee, handleRemoveAllEmployee) => [\r\n    {\r\n      minWidth: 178,\r\n      resizable: true,\r\n      Header: \"Имя\",\r\n      accessor: \"firstName\"\r\n    },\r\n    {\r\n      minWidth: 177,\r\n      resizable: true,\r\n      Header: \"Фамилия\",\r\n      accessor: \"lastName\"\r\n    },\r\n    {\r\n      minWidth: 177,\r\n      resizable: true,\r\n      Header: \"Возраст\",\r\n      accessor: \"age\"\r\n    },\r\n    {\r\n      id: \"delete\",\r\n      accessor: () => \"delete\",\r\n      width: 130,\r\n      Header: (tableProps) => {\r\n        const { isAllRowsSelected } = tableProps;\r\n        if (isAllRowsSelected) {\r\n          return (\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => {\r\n                handleRemoveAllEmployee()\r\n              }}\r\n            >\r\n              Удалить всё\r\n            </Button>\r\n          );\r\n        }\r\n        return null;\r\n      },\r\n      Cell: (tableProps) => (\r\n        <Button\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            const { index: rowIndex } = tableProps?.row;\r\n            const dataId = tableProps?.data[rowIndex]?.id;\r\n            const { rows } = tableProps;\r\n            const selectedRows = rows\r\n              .filter((row) => {\r\n                const isSelected = row.isSelected;\r\n                if (isSelected) return row.original.id;\r\n                return false;\r\n              })\r\n              .map((row) => row.original.id);\r\n            if (dataId) {\r\n              handleRemoveEmployee(dataId, rowIndex, selectedRows)\r\n            }\r\n          }}\r\n        >\r\n          Удалить\r\n        </Button>\r\n      )\r\n    }\r\n  ]","export const overlayStyles = () => (\r\n  {\r\n    wrapper: {\r\n      position: \"fixed\",\r\n      width: \"100vw\",\r\n      height: \"100vh\",\r\n      padding: \"0\",\r\n      transition: \"all .3s\",\r\n      fontFamily: \"Roboto\",\r\n      fontSize: \"30px\"\r\n    },\r\n    overlay: {\r\n      position: \"fixed\",\r\n      width: \"100vw\",\r\n      height: \"100vh\",\r\n      top: 0,\r\n      left: 0,\r\n      display: \"flex\",\r\n      textAlign: \"center\",\r\n      fontSize: \"1.2em\",\r\n      color: \"#fff\",\r\n      background: \"rgba(0,0,0,0.7)\",\r\n      zIndex: 800,\r\n      transition: \"opacity 500ms ease-in\",\r\n      opacity: 1\r\n    }\r\n  }\r\n)","import { nanoid } from \"nanoid\";\n\nconst getRandomInRange = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const firstNames = [\n  \"Иосиф\",\n  \"Николай\",\n  \"Самуил\",\n  \"Николай\",\n  \"Владимир\",\n  \"Сергей\",\n  \"Василий\",\n  \"Максимилиан\",\n  \"Михаил\",\n  \"Игорь\",\n  \"Михаил\",\n  \"Александр\",\n  \"Лев\",\n  \"Анна\",\n  \"Антон\",\n  \"Сергей\"\n];\nexport const lastNames = [\n  \"Бродский\",\n  \"Гумилёв\",\n  \"Маршак\",\n  \"Рерих\",\n  \"Даль\",\n  \"Довлатов\",\n  \"Шукшин\",\n  \"Волошин\",\n  \"Зощенко\",\n  \"Северянин\",\n  \"Лермонтов\",\n  \"Пушкин\",\n  \"Толстой\",\n  \"Ахматова\",\n  \"Чехов\",\n  \"Есенин\"\n];\nexport const createListEmployees = () => {\n  const employees = [];\n  firstNames.forEach((name, i) => {\n    const employee = {\n      id: nanoid(),\n      firstName: name,\n      lastName: lastNames[i],\n      age: getRandomInRange(30, 100)\n    };\n    employees.push(employee);\n  });\n  return employees;\n};\n","import { createListEmployees } from \"./createListEmployees\";\n\nexport const initialStore = {\n  employees: createListEmployees(),\n  isOverlay: false\n};\n","import { initialStore } from \"./initialStore\";\nimport { nanoid } from \"nanoid\";\n\nconst employees = (state = initialStore, action = {}) => {\n  switch (action.type) {\n    case \"ADD_EMPLOYEE\":\n      const { firstName, lastName, age } = action;\n      return {\n        ...state,\n        employees: [\n          ...state.employees,\n          {\n            id: nanoid(),\n            firstName,\n            lastName,\n            age\n          }\n        ]\n      };\n    case \"REMOVE_EMPLOYEE\":\n      const updateEmployess = [\n        ...state.employees.filter((employee) => employee.id !== action.dataId)\n      ];\n      return {\n        ...state,\n        employees: updateEmployess\n      };\n    case \"REMOVE_ALL_EMPLOYEES\":\n      return {\n        ...state,\n        employees: []\n      };\n    case \"CHANGE_OVERLAY_FLAG\":\n      return {\n        ...state,\n        isOverlay: action.isOverlay\n      };\n    default:\n      return state;\n  }\n};\n\nexport default employees;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport employees from \"./utils/reducer\";\nimport { initialStore } from \"./utils/initialStore\";\n\nconst store = createStore(employees, initialStore);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}