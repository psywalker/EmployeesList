{"version":3,"sources":["styles/PageContainer.js","styles/EmployeeContainer.js","components/IndeterminateCheckbox.js","components/Table.js","components/InputTextField.js","App.js","utils/actions.js","utils/createListEmployees.js","utils/initialStore.js","utils/reducer.js","index.js"],"names":["PageContainer","styled","div","EmployeeContainer","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","handeChangeSelectedRow","defaultRef","useRef","resolvedRef","useEffect","current","type","Table","columns","data","useTable","useResizeColumns","useBlockLayout","hooks","visibleColumns","push","id","width","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","useSortBy","useRowSelect","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","selectedNames","map","item","index","length","values","firstName","headerGroup","getHeaderGroupProps","headers","column","columnIndex","classForCellWithChexbox","getHeaderProps","className","resizable","getResizerProps","isResizing","getSortByToggleProps","isSorted","isSortedDesc","render","classForSelectedRow","original","isSelected","getRowProps","cells","cell","cellIndex","getCellProps","colSpan","Typography","color","InputTextField","handleOnChange","func","TextField","onChange","value","target","delay","ms","Promise","resolve","setTimeout","App","memo","dispatch","useDispatch","employees","useSelector","state","useState","inputName","setInputName","inputLastName","setInputLastName","inputAge","setInputAge","setData","isOverlayActive","setIsOverlayActive","useMemo","minWidth","accessor","tableProps","isAllRowsSelected","Button","size","variant","onClick","then","rowIndex","dataId","selectedRows","filter","rowDeleteIndex","removeEmployee","active","spinner","text","styles","wrapper","position","height","padding","transition","fontFamily","fontSize","overlay","top","left","display","textAlign","background","zIndex","opacity","gutterBottom","required","label","lastName","age","disabled","firstNames","lastNames","initialStore","forEach","name","i","min","max","employee","nanoid","Math","floor","random","createListEmployees","action","updateEmployess","store","createStore","reducer","ReactDOM","document","getElementById"],"mappings":"iNAEaA,EAAgBC,IAAOC,IAAV,u0ICAbC,EAAoBF,IAAOC,IAAV,oF,uDCAjBE,EAAwBC,sBACnC,WAAqDC,GAAS,IAA3DC,EAA0D,EAA1DA,cAA0CC,GAAgB,EAA3CC,uBAA2C,2DACrDC,EAAaC,mBACbC,EAAcN,GAAOI,EAM3B,OAJAG,qBAAU,WACRD,EAAYE,QAAQP,cAAgBA,IACnC,CAACK,EAAaL,IAGf,mCACE,mCAAOQ,KAAK,WAAWT,IAAKM,GAAiBJ,SCDxCQ,EAAQ,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAAW,EAQtCC,mBACF,CACEF,UACAC,QAEFE,mBACAC,kBACA,SAACC,GACCA,EAAMC,eAAeC,MAAK,SAACP,GAAD,OACxB,CACEQ,GAAI,YACJC,MAAO,GAEPC,OAAQ,gBAAGC,EAAH,EAAGA,8BAAH,OACN,8BACE,cAACxB,EAAD,eAA2BwB,SAI/BC,KAAM,gBAAGC,EAAH,EAAGA,IAAH,OACJ,8BACE,cAAC1B,EAAD,eAA2B0B,EAAIC,mCAbb,mBAiBrBd,SAGPe,YACAC,gBAnCAC,EAFwC,EAExCA,cACAC,EAHwC,EAGxCA,kBACAC,EAJwC,EAIxCA,aACAC,EALwC,EAKxCA,KACAC,EANwC,EAMxCA,WACAC,EAPwC,EAOxCA,iBAiCIC,EAAgBD,EAAiBE,KAAI,SAACC,EAAMC,GAAP,eACzCA,IAAUJ,EAAiBK,OAAS,EAApC,OACIF,QADJ,IACIA,GADJ,UACIA,EAAMG,cADV,aACI,EAAcC,WACV,OAAJJ,QAAI,IAAJA,GAAA,UAAAA,EAAMG,cAAN,eAAcC,WAAY,QAGhC,OACE,mCACE,kDAAWZ,KAAX,cACE,gCACGE,EAAaK,KAAI,SAACM,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQR,KAAI,SAACS,EAAQC,GAChC,IAAMC,EAA2BD,EAE7B,GADA,qBAEJ,OACE,+CACMD,EAAOG,kBADb,IAEEC,UAAWF,EAFb,UAIGF,EAAOK,WACN,+CACML,EAAOM,mBADb,IAEEF,UAAS,kBACPJ,EAAOO,WAAa,aAAe,IAHvC,SAME,cAAC,IAAD,OAIJ,gDACMP,EAAOG,eAAeH,EAAOQ,yBADnC,IAEEJ,UAAU,mBAFZ,SAIGJ,EAAOS,SACJT,EAAOU,aACLV,EAAOW,OAAO,UAAY,gBAC1BX,EAAOW,OAAO,UAAY,gBAC5BX,EAAOW,OAAO,4BAQhC,iDAAW1B,KAAX,aACGE,EAAKI,KAAI,SAACX,GAAS,IAEZgC,GAFW,OACMhC,QADN,IACMA,OADN,EACMA,EAAKiC,UAApBC,YAEQlC,EAAIkC,WAAa,eAAiB,GAGlD,OADA1B,EAAWR,GAET,8CAAQA,EAAImC,eAAZ,IAA2BX,UAAWQ,EAAtC,SACGhC,EAAIoC,MAAMzB,KAAI,SAAC0B,EAAMC,GACpB,IAAMhB,EAA2BgB,EAE7B,GADA,qBAEJ,OACE,4CACEd,UAAWF,GACPe,EAAKE,gBAFX,aAIGF,EAAKN,OAAO,uBAQ3B,gCACE,6BACE,qBAAIS,QAAQ,IAAZ,UACE,cAACC,EAAA,EAAD,CAAYC,MAAM,YAAlB,uFACA,cAACD,EAAA,EAAD,CAAYC,MAAM,UAAlB,SAA6BhC,kB,SC/H9BiC,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,KAASnE,EAA5B,gDAC5B,cAACoE,EAAA,EAAD,2BACMpE,GADN,IAEEqE,SAAU,gBAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2BJ,EAAeI,EAAOH,QCQzDK,EAAQ,SAACC,GAAD,OAAQ,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OA6LpDI,EA3LHC,gBAAK,WACf,IAAMC,EAAWC,cACTC,EAAcC,aAAY,SAACC,GACjC,MAAO,CAAEF,UAAWE,EAAMF,cADpBA,UAFa,EAKaG,mBAAS,IALtB,mBAKdC,EALc,KAKHC,EALG,OAMqBF,mBAAS,IAN9B,mBAMdG,EANc,KAMCC,EAND,OAOWJ,mBAAS,IAPpB,mBAOdK,EAPc,KAOJC,EAPI,OAQGN,mBAASH,GARZ,mBAQdvE,EARc,KAQRiF,EARQ,OASyBP,oBAAS,GATlC,mBASdQ,EATc,KASGC,EATH,KAUfpF,EAAUqF,mBACd,iBAAM,CACJ,CACEC,SAAU,IACVhD,WAAW,EACX5B,OAAQ,qBACR6E,SAAU,aAEZ,CACED,SAAU,IACVhD,WAAW,EACX5B,OAAQ,6CACR6E,SAAU,YAEZ,CACED,SAAU,IACVhD,WAAW,EACX5B,OAAQ,6CACR6E,SAAU,OAEZ,CACE/E,GAAI,SACJ+E,SAAU,iBAAM,UAChB9E,MAAO,IACPC,OAAQ,SAAC8E,GAEP,OAD8BA,EAAtBC,kBAGJ,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,QAAQ,YACRrC,MAAM,YACNsC,QAAS,WACPT,GAAmB,GACnBrB,EAAM,KAAM+B,MAAK,WACfxB,EC3CoB,CACtCxE,KAjBkC,yBD4DhBsF,GAAmB,OARzB,2EAgBG,MAETxE,KAAM,SAAC4E,GAAD,OACJ,cAACE,EAAA,EAAD,CACEC,KAAK,QACLC,QAAQ,YACRrC,MAAM,YACNsC,QAAS,WAAO,IAAD,EACEE,GADF,OACeP,QADf,IACeA,OADf,EACeA,EAAY3E,KAAhCa,MACFsE,EAAM,OAAGR,QAAH,IAAGA,GAAH,UAAGA,EAAYvF,KAAK8F,UAApB,aAAG,EAA4BvF,GAErCyF,EADWT,EAATpE,KAEL8E,QAAO,SAACrF,GAEP,QADmBA,EAAIkC,YACAlC,EAAIiC,SAAStC,MAGrCgB,KAAI,SAACX,GAAD,OAASA,EAAIiC,SAAStC,MACzBwF,IACFZ,GAAmB,GACnBrB,EAAM,KAAM+B,MAAK,WACfxB,EChFY,SAAC0B,EAAQG,EAAgBF,GAAzB,MAA2C,CACvEnG,KAX6B,kBAY7BkG,SACAG,iBACAF,gBD4EyBG,CAAeJ,EAAQD,EAAUE,IAC1Cb,GAAmB,QAnB3B,6DA6BN,IAaI3B,EAAiB,SAACI,EAAOH,GAC7BA,EAAKG,IAOP,OAJAjE,qBAAU,WACRsF,EAAQV,KACP,CAACA,IAGF,cAACzF,EAAD,UACE,eAAC,IAAD,CACEsH,OAAQlB,EACRmB,SAAO,EACPC,KAAK,oKACLC,OAAQ,CACNC,QAAS,CACPC,SAAU,QACVjG,MAAO,QACPkG,OAAQ,QACRC,QAAS,IACTC,WAAY,UACZC,WAAY,SACZC,SAAU,QAEZC,QAAS,CACPN,SAAU,QACVjG,MAAO,QACPkG,OAAQ,QACRM,IAAK,EACLC,KAAM,EACNC,QAAS,OACTC,UAAW,SACXL,SAAU,QACVxD,MAAO,OACP8D,WAAY,kBACZC,OAAQ,IACRT,WAAY,wBACZU,QAAS,IA3Bf,UA+BE,cAACjE,EAAA,EAAD,CAAYsC,QAAQ,KAAK4B,cAAY,EAArC,sHAGA,eAACtI,EAAD,WACE,cAAC,EAAD,CACEuI,UAAQ,EACRjH,GAAG,OACHkH,MAAM,qBACN9B,QAAQ,WACR/B,MAAOe,EACPlB,KAAMmB,EACNpB,eAAgB,SAACI,EAAOH,GAAR,OAAiBD,EAAeI,EAAOH,MAEzD,cAAC,EAAD,CACE+D,UAAQ,EACRjH,GAAG,YACHkH,MAAM,6CACN9B,QAAQ,WACR/B,MAAOiB,EACPpB,KAAMqB,EACNtB,eAAgB,SAACI,EAAOH,GAAR,OAAiBD,EAAeI,EAAOH,MAEzD,cAAC,EAAD,CACE+D,UAAQ,EACR3H,KAAK,SACLU,GAAG,MACHkH,MAAM,6CACN9B,QAAQ,WACR/B,MAAOmB,EACPtB,KAAMuB,EACNxB,eAAgB,SAACI,EAAOH,GAAR,OAAiBD,EAAeI,EAAOH,MAEzD,cAACgC,EAAA,EAAD,CACEE,QAAQ,YACRrC,MAAM,UACNsC,QAtFmB,WAC3BT,GAAmB,GACnBrB,EAAM,KAAM+B,MAAK,WACfxB,ECxGoD,CACxDxE,KAL0B,eAM1B+B,UDsGyB+C,ECrGzB+C,SDqGoC7C,ECpGpC8C,IDoGmD5C,IAC/CI,GAAmB,MAErBP,EAAa,IACbE,EAAiB,IACjBE,EAAY,KA+EJ4C,UAAWjD,IAAcE,IAAkBE,EAJ7C,2DASF,cAAC,EAAD,CAAOhF,QAASA,EAASC,KAAMA,Y,gBEhM1B6H,EAAa,CACxB,iCACA,6CACA,uCACA,6CACA,mDACA,uCACA,6CACA,qEACA,uCACA,iCACA,uCACA,yDACA,qBACA,2BACA,iCACA,wCAEWC,EAAY,CACvB,mDACA,6CACA,uCACA,iCACA,2BACA,mDACA,uCACA,6CACA,6CACA,yDACA,yDACA,uCACA,6CACA,mDACA,iCACA,wCCrCWC,EAAe,CAC1BxD,UDsCiC,WACjC,IAAMA,EAAY,GAUlB,OATAsD,EAAWG,SAAQ,SAACC,EAAMC,GACxB,IA1CsBC,EAAKC,EA0CrBC,EAAW,CACf9H,GAAI+H,cACJ1G,UAAWqG,EACXP,SAAUI,EAAUI,GACpBP,KA9CoBQ,EA8CE,GA9CGC,EA8CC,IA7C9BG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,IAAMA,IA+C5C5D,EAAUjE,KAAK+H,MAEV9D,ECjDImE,ICkCEnE,EAlCG,WAAwC,IAAvCE,EAAsC,uDAA9BsD,EAAcY,EAAgB,uDAAP,GAChD,OAAQA,EAAO9I,MACb,IAAK,eAAL,IACU+B,EAA6B+G,EAA7B/G,UAAW8F,EAAkBiB,EAAlBjB,SAAUC,EAAQgB,EAARhB,IAC7B,OAAO,2BACFlD,GADL,IAEEF,UAAU,GAAD,mBACJE,EAAMF,WADF,CAEP,CACEhE,GAAI+H,cACJ1G,YACA8F,WACAC,WAIR,IAAK,kBACH,IAAMiB,EAAe,YAChBnE,EAAMF,UAAU0B,QAAO,SAACoC,GAAD,OAAcA,EAAS9H,KAAOoI,EAAO5C,WAEjE,OAAO,2BACFtB,GADL,IAEEF,UAAWqE,IAEf,IAAK,uBACH,OAAO,2BACFnE,GADL,IAEEF,UAAW,KAEf,QACE,OAAOE,ICzBPoE,EAAQC,YAAYC,EAAShB,GAEnCiB,IAASrG,OACP,cAAC,IAAD,CAAUkG,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.8640ad41.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const PageContainer = styled.div`\n  padding: 1rem;\n\n  .container {\n  }\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n    font-family: \"Roboto\";\n    width: 500px;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    .row-selected {\n      background: rgba(24, 168, 204, 0.12);\n    }\n    .sorted-container {\n      display: flex !important;\n      align-items: center !important;\n      height: 30px;\n      text-align: left;\n    }\n    .cell-with-checkbox {\n      display: flex !important;\n      justify-content: center !important;\n\n      & .sorted-container {\n        display: inline-block !important;\n        text-align: center;\n      }\n    }\n    thead {\n      position: sticky;\n      top: 0;\n\n      tr {\n      }\n    }\n    tbody {\n      height: 300px;\n      overflow-y: auto;\n      display: grid;\n      tr {\n        transition: all 0.3s;\n      }\n      tr:hover {\n        background: rgba(24, 168, 204, 0.12);\n      }\n    }\n    tfoot td {\n      border-top: 1px solid #000;\n      box-shadow: 0px -9px 6px -1px rgba(34, 60, 80, 0.23);\n      justify-content: left;\n      align-items: start;\n      display: flex;\n      gap: 5px;\n    }\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      text-align: left;\n\n      :last-child {\n      }\n      .resizer {\n        overflow: hidden;\n        opacity: 0.4;\n        cursor: ew-resize;\n        width: 20px;\n        height: 32px;\n        position: absolute;\n        right: 0;\n        z-index: 1;\n        top: 16px;\n        transform: translate(0, -50%);\n        touch-action: none;\n        transition: all 0.1s;\n        content: \"\\EA9E\";\n        & svg {\n          font-size: 40px;\n        }\n        &.isResizing,\n        &:hover {\n          opacity: 1;\n        }\n      }\n    }\n    th {\n      display: flex;\n      box-shadow: 0px 10px 6px -1px rgba(34, 60, 80, 0.23);\n      font-size: 22px;\n      height: 48px;\n    }\n    td {\n      display: flex !important;\n      align-items: center;\n      font-size: 18px;\n      font-weight: bold;\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const EmployeeContainer = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  gap: 10px;\n`;\n","import React, { useEffect, forwardRef, useRef } from \"react\";\n\nexport const IndeterminateCheckbox = forwardRef(\n  ({ indeterminate, handeChangeSelectedRow, ...rest }, ref) => {\n    const defaultRef = useRef();\n    const resolvedRef = ref || defaultRef;\n\n    useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n      <>\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport {\n  useTable,\n  useRowSelect,\n  useResizeColumns,\n  useBlockLayout,\n  useSortBy\n} from \"react-table\";\nimport { Typography } from \"@material-ui/core\";\nimport ReorderTwoToneIcon from \"@material-ui/icons/ReorderTwoTone\";\nimport { IndeterminateCheckbox } from \"./IndeterminateCheckbox\";\n\nexport const Table = ({ columns, data }) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useResizeColumns,\n    useBlockLayout,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => [\n        {\n          id: \"selection\",\n          width: 50,\n\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <div>\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n            </div>\n          ),\n\n          Cell: ({ row }) => (\n            <div>\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          )\n        },\n        ...columns\n      ]);\n    },\n    useSortBy,\n    useRowSelect\n  );\n\n  const selectedNames = selectedFlatRows.map((item, index) =>\n    index === selectedFlatRows.length - 1\n      ? item?.values?.firstName\n      : item?.values?.firstName + \", \"\n  );\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column, columnIndex) => {\n                const classForCellWithChexbox = !columnIndex\n                  ? \"cell-with-checkbox\"\n                  : \"\";\n                return (\n                  <th\n                    {...column.getHeaderProps()}\n                    className={classForCellWithChexbox}\n                  >\n                    {column.resizable && (\n                      <div\n                        {...column.getResizerProps()}\n                        className={`resizer ${\n                          column.isResizing ? \"isResizing\" : \"\"\n                        }`}\n                      >\n                        <ReorderTwoToneIcon />\n                      </div>\n                    )}\n\n                    <span\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      className=\"sorted-container\"\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? column.render(\"Header\") + \" 🔽\"\n                          : column.render(\"Header\") + \" 🔼\"\n                        : column.render(\"Header\")}\n                    </span>\n                  </th>\n                );\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row) => {\n            const { isSelected } = row?.original;\n            const classForSelectedRow =\n              isSelected || row.isSelected ? \"row-selected\" : \"\";\n\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()} className={classForSelectedRow}>\n                {row.cells.map((cell, cellIndex) => {\n                  const classForCellWithChexbox = !cellIndex\n                    ? \"cell-with-checkbox\"\n                    : \"\";\n                  return (\n                    <td\n                      className={classForCellWithChexbox}\n                      {...cell.getCellProps()}\n                    >\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td colSpan=\"4\">\n              <Typography color=\"secondary\">Пользователи:</Typography>\n              <Typography color=\"primary\">{selectedNames}</Typography>\n            </td>\n          </tr>\n        </tfoot>\n      </table>\n    </>\n  );\n};\n","import React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\nexport const InputTextField = ({ handleOnChange, func, ...rest }) => (\n  <TextField\n    {...rest}\n    onChange={({ target: { value } }) => handleOnChange(value, func)}\n  />\n);\n","import React, { useState, useMemo, useEffect, memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport {\n  addEmployee,\n  removeEmployee,\n  removeAllEmployee\n} from \"./utils/actions\";\nimport { PageContainer } from \"./styles/PageContainer\";\nimport { EmployeeContainer } from \"./styles/EmployeeContainer\";\nimport { Table } from \"./components/Table\";\nimport { InputTextField } from \"./components/InputTextField\";\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst App = memo(() => {\n  const dispatch = useDispatch();\n  const { employees } = useSelector((state) => {\n    return { employees: state.employees };\n  });\n  const [inputName, setInputName] = useState(\"\");\n  const [inputLastName, setInputLastName] = useState(\"\");\n  const [inputAge, setInputAge] = useState(\"\");\n  const [data, setData] = useState(employees);\n  const [isOverlayActive, setIsOverlayActive] = useState(false);\n  const columns = useMemo(\n    () => [\n      {\n        minWidth: 178,\n        resizable: true,\n        Header: \"Имя\",\n        accessor: \"firstName\"\n      },\n      {\n        minWidth: 177,\n        resizable: true,\n        Header: \"Фамилия\",\n        accessor: \"lastName\"\n      },\n      {\n        minWidth: 177,\n        resizable: true,\n        Header: \"Возраст\",\n        accessor: \"age\"\n      },\n      {\n        id: \"delete\",\n        accessor: () => \"delete\",\n        width: 130,\n        Header: (tableProps) => {\n          const { isAllRowsSelected } = tableProps;\n          if (isAllRowsSelected) {\n            return (\n              <Button\n                size=\"small\"\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  setIsOverlayActive(true);\n                  delay(2000).then(() => {\n                    dispatch(removeAllEmployee());\n                    setIsOverlayActive(false);\n                  });\n                }}\n              >\n                Удалить всё\n              </Button>\n            );\n          }\n          return null;\n        },\n        Cell: (tableProps) => (\n          <Button\n            size=\"small\"\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              const { index: rowIndex } = tableProps?.row;\n              const dataId = tableProps?.data[rowIndex]?.id;\n              const { rows } = tableProps;\n              const selectedRows = rows\n                .filter((row) => {\n                  const isSelected = row.isSelected;\n                  if (isSelected) return row.original.id;\n                  return false;\n                })\n                .map((row) => row.original.id);\n              if (dataId) {\n                setIsOverlayActive(true);\n                delay(2000).then(() => {\n                  dispatch(removeEmployee(dataId, rowIndex, selectedRows));\n                  setIsOverlayActive(false);\n                });\n              }\n            }}\n          >\n            Удалить\n          </Button>\n        )\n      }\n    ],\n    []\n  );\n\n  const handleCreateEmployee = () => {\n    setIsOverlayActive(true);\n    delay(2000).then(() => {\n      dispatch(addEmployee(inputName, inputLastName, inputAge));\n      setIsOverlayActive(false);\n    });\n    setInputName(\"\");\n    setInputLastName(\"\");\n    setInputAge(\"\");\n  };\n  const handleOnChange = (value, func) => {\n    func(value);\n  };\n\n  useEffect(() => {\n    setData(employees);\n  }, [employees]);\n\n  return (\n    <PageContainer>\n      <LoadingOverlay\n        active={isOverlayActive}\n        spinner\n        text=\"Ожидайте результата действия...\"\n        styles={{\n          wrapper: {\n            position: \"fixed\",\n            width: \"100vw\",\n            height: \"100vh\",\n            padding: \"0\",\n            transition: \"all .3s\",\n            fontFamily: \"Roboto\",\n            fontSize: \"30px\"\n          },\n          overlay: {\n            position: \"fixed\",\n            width: \"100vw\",\n            height: \"100vh\",\n            top: 0,\n            left: 0,\n            display: \"flex\",\n            textAlign: \"center\",\n            fontSize: \"1.2em\",\n            color: \"#fff\",\n            background: \"rgba(0,0,0,0.7)\",\n            zIndex: 800,\n            transition: \"opacity 500ms ease-in\",\n            opacity: 1\n          }\n        }}\n      >\n        <Typography variant=\"h5\" gutterBottom>\n          Создать сотрудника:\n        </Typography>\n        <EmployeeContainer>\n          <InputTextField\n            required\n            id=\"name\"\n            label=\"Имя\"\n            variant=\"outlined\"\n            value={inputName}\n            func={setInputName}\n            handleOnChange={(value, func) => handleOnChange(value, func)}\n          />\n          <InputTextField\n            required\n            id=\"last-name\"\n            label=\"Фамилия\"\n            variant=\"outlined\"\n            value={inputLastName}\n            func={setInputLastName}\n            handleOnChange={(value, func) => handleOnChange(value, func)}\n          />\n          <InputTextField\n            required\n            type=\"number\"\n            id=\"age\"\n            label=\"Возраст\"\n            variant=\"outlined\"\n            value={inputAge}\n            func={setInputAge}\n            handleOnChange={(value, func) => handleOnChange(value, func)}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleCreateEmployee}\n            disabled={!inputName || !inputLastName || !inputAge}\n          >\n            Создать\n          </Button>\n        </EmployeeContainer>\n        <Table columns={columns} data={data} />\n      </LoadingOverlay>\n    </PageContainer>\n  );\n});\n\nexport default App;\n","export const ADD_EMPLOYEE = \"ADD_EMPLOYEE\";\nexport const REMOVE_EMPLOYEE = \"REMOVE_EMPLOYEE\";\nexport const REMOVE_ALL_EMPLOYEES = \"REMOVE_ALL_EMPLOYEES\";\n\nexport const addEmployee = (firstName, lastName, age) => ({\n  type: ADD_EMPLOYEE,\n  firstName,\n  lastName,\n  age\n});\n\nexport const removeEmployee = (dataId, rowDeleteIndex, selectedRows) => ({\n  type: REMOVE_EMPLOYEE,\n  dataId,\n  rowDeleteIndex,\n  selectedRows\n});\n\nexport const removeAllEmployee = () => ({\n  type: REMOVE_ALL_EMPLOYEES\n});\n","import { nanoid } from \"nanoid\";\n\nconst getRandomInRange = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const firstNames = [\n  \"Иосиф\",\n  \"Николай\",\n  \"Самуил\",\n  \"Николай\",\n  \"Владимир\",\n  \"Сергей\",\n  \"Василий\",\n  \"Максимилиан\",\n  \"Михаил\",\n  \"Игорь\",\n  \"Михаил\",\n  \"Александр\",\n  \"Лев\",\n  \"Анна\",\n  \"Антон\",\n  \"Сергей\"\n];\nexport const lastNames = [\n  \"Бродский\",\n  \"Гумилёв\",\n  \"Маршак\",\n  \"Рерих\",\n  \"Даль\",\n  \"Довлатов\",\n  \"Шукшин\",\n  \"Волошин\",\n  \"Зощенко\",\n  \"Северянин\",\n  \"Лермонтов\",\n  \"Пушкин\",\n  \"Толстой\",\n  \"Ахматова\",\n  \"Чехов\",\n  \"Есенин\"\n];\nexport const createListEmployees = () => {\n  const employees = [];\n  firstNames.forEach((name, i) => {\n    const employee = {\n      id: nanoid(),\n      firstName: name,\n      lastName: lastNames[i],\n      age: getRandomInRange(30, 100)\n    };\n    employees.push(employee);\n  });\n  return employees;\n};\n","import { createListEmployees } from \"./createListEmployees\";\n\nexport const initialStore = {\n  employees: createListEmployees()\n};\n","import { initialStore } from \"./initialStore\";\nimport { nanoid } from \"nanoid\";\n\nconst employees = (state = initialStore, action = {}) => {\n  switch (action.type) {\n    case \"ADD_EMPLOYEE\":\n      const { firstName, lastName, age } = action;\n      return {\n        ...state,\n        employees: [\n          ...state.employees,\n          {\n            id: nanoid(),\n            firstName,\n            lastName,\n            age\n          }\n        ]\n      };\n    case \"REMOVE_EMPLOYEE\":\n      const updateEmployess = [\n        ...state.employees.filter((employee) => employee.id !== action.dataId)\n      ];\n      return {\n        ...state,\n        employees: updateEmployess\n      };\n    case \"REMOVE_ALL_EMPLOYEES\":\n      return {\n        ...state,\n        employees: []\n      };\n    default:\n      return state;\n  }\n};\n\nexport default employees;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducer from \"./utils/reducer\";\nimport{ initialStore } from \"./utils/initialStore\";\n\nconst store = createStore(reducer, initialStore);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}